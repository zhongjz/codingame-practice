#!/bin/bash
# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

# width: width of the firewall grid
# height: height of the firewall grid

declare -a mapRow
declare -A waiting
guardnum=0

guardadd() {
	x=$1
	y=$2
	flagup=0
	flagdown=0
	flagleft=0
	flagright=0
	for diff in 1 2 3; do
		if [[ $flagleft -eq 0 ]]; then
			let tempx=x-diff
			if [[ $tempx -ge 0 ]]; then
				if [[ ${mapRow[$y]:$tempx:1} == "#" ]]; then
					flagleft=1
				else
					if [[ ${mapRow[$y]:$tempx:1} == "." ]]; then
						if [[ -z ${bombvalue[$tempx"_"$y]} ]]; then
							bombopt[$index]=$tempx"_"$y
							bombvalue[$tempx"_"$y]=1
							let index++
						else
							let bombvalue[$tempx"_"$y]++
						fi
					fi
				fi
			else
				flagleft=1
			fi
		fi
		if [[ $flagright -eq 0 ]]; then
			let tempx=x+diff
			if [[ $tempx -lt $width ]]; then
				if [[ ${mapRow[$y]:$tempx:1} == "#" ]]; then
					flagright=1
				else
					if [[ ${mapRow[$y]:$tempx:1} == "." ]]; then
						if [[ -z ${bombvalue[$tempx"_"$y]} ]]; then
							bombopt[$index]=$tempx"_"$y
							bombvalue[$tempx"_"$y]=1
							let index++
						else
							let bombvalue[$tempx"_"$y]++
						fi
					fi
				fi
			else
				flagright=1
			fi
		fi
		if [[ $flagup -eq 0 ]]; then
			let tempy=y-diff
			if [[ $tempy -ge 0 ]]; then
				if [[ ${mapRow[$tempy]:$x:1} == "#" ]]; then
					flagup=1
				else
					if [[ ${mapRow[$tempy]:$x:1} == "." ]]; then
						if [[ -z ${bombvalue[$x"_"$tempy]} ]]; then
							bombopt[$index]=$x"_"$tempy
							bombvalue[$x"_"$tempy]=1
							let index++
						else
							let bombvalue[$x"_"$tempy]++
						fi
					fi
				fi
			else
				flagup=1
			fi
		fi
		if [[ $flagdown -eq 0 ]]; then
			let tempy=y+diff
			if [[ $tempY -lt $height ]]; then
				if [[ ${mapRow[$tempy]:$x:1} == "#" ]]; then
					flagdown=1
				else
					if [[ ${mapRow[$tempy]:$x:1} == "." ]]; then
						if [[ -z ${bombvalue[$x"_"$tempy]} ]]; then
							bombopt[$index]=$x"_"$tempy
							bombvalue[$x"_"$tempy]=1
							let index++
						else
							let bombvalue[$x"_"$tempy]++
						fi
					fi
				fi
			else
				flagdown=1
			fi
		fi
	done
}

bomb() {
	x=$1
	y=$2
	attemp=$3
	flagup=0
	flagdown=0
	flagleft=0
	flagright=0
	echo "bomb blast at:" $x $y >&2
	for diff in 1 2 3; do
		if [[ $flagleft -eq 0 ]]; then
			let tempx=x-diff
			if [[ $tempx -ge 0 ]]; then
				if [[ ${mapRow[$y]:$tempx:1} == "#" ]]; then
					flagleft=1
				else
					if [[ ${mapRow[$y]:$tempx:1} == "@" ]]; then
						echo "kill guard at:" $tempx $y >&2
						guardrm $tempx $y $attemp
					fi
				fi
			else
				flagleft=1
			fi
		fi
		if [[ $flagright -eq 0 ]]; then
			let tempx=x+diff
			if [[ $tempx -lt $width ]]; then
				if [[ ${mapRow[$y]:$tempx:1} == "#" ]]; then
					flagright=1
				else
					if [[ ${mapRow[$y]:$tempx:1} == "@" ]]; then
						echo "kill guard at:" $tempx $y >&2
						guardrm $tempx $y $attemp
					fi
				fi
			else
				flagright=1
			fi
		fi
		if [[ $flagup -eq 0 ]]; then
			let tempy=y-diff
			if [[ $tempy -ge 0 ]]; then
				if [[ ${mapRow[$tempy]:$x:1} == "#" ]]; then
					flagup=1
				else
					if [[ ${mapRow[$tempy]:$x:1} == "@" ]]; then
						echo "kill guard at:" $x $tempy >&2
						guardrm $x $tempy $attemp
					fi
				fi
			else
				flagup=1
			fi
		fi
		if [[ $flagdown -eq 0 ]]; then
			let tempy=y+diff
			if [[ $tempY -lt $height ]]; then
				if [[ ${mapRow[$tempy]:$x:1} == "#" ]]; then
					flagdown=1
				else
					if [[ ${mapRow[$tempy]:$x:1} == "@" ]]; then
						echo "kill guard at:" $x $tempy >&2
						guardrm $x $tempy $attemp
					fi
				fi
			else
				flagdown=1
			fi
		fi
	done
}

guardrm() {
	x1=$1
	y1=$2
	attemp1=$3
	flagup1=0
	flagdown1=0
	flagleft1=0
	flagright1=0
	for diff1 in 1 2 3; do
		if [[ $flagleft1 -eq 0 ]]; then
			let tempx1=x1-diff1
			if [[ $tempx1 -ge 0 ]]; then
				if [[ ${mapRow[$y1]:$tempx1:1} == "#" ]]; then
					flagleft1=1
				else
					if [[ ${mapRow[$y1]:$tempx1:1} == "." ]]; then
					    [[ $attemp1 -eq 1 ]]&&let bombvalue[$tempx1"_"$y1]--||let bombvalue1[$tempx1"_"$y1]--
					fi
				fi
			else
				flagleft1=1
			fi
		fi
		if [[ $flagright1 -eq 0 ]]; then
			let tempx1=x1+diff1
			if [[ $tempx1 -lt $width ]]; then
				if [[ ${mapRow[$y1]:$tempx1:1} == "#" ]]; then
					flagright1=1
				else
					if [[ ${mapRow[$y1]:$tempx1:1} == "." ]]; then
					    [[ $attemp1 -eq 1 ]]&&let bombvalue[$tempx1"_"$y1]--||let bombvalue1[$tempx1"_"$y1]--
					fi
				fi
			else
				flagright1=1
			fi
		fi
		if [[ $flagup1 -eq 0 ]]; then
			let tempy1=y1-diff1
			if [[ $tempy1 -ge 0 ]]; then
				if [[ ${mapRow[$tempy1]:$x1:1} == "#" ]]; then
					flagup1=1
				else
					if [[ ${mapRow[$tempy1]:$x1:1} == "." ]]; then
					    [[ $attemp1 -eq 1 ]]&&let bombvalue[$x1"_"$tempy1]--||let bombvalue1[$x1"_"$tempy1]--
					fi
				fi
			else
				flagup1=1
			fi
		fi
		if [[ $flagdown -eq 0 ]]; then
			let tempy1=y1+diff1
			if [[ $tempY1 -lt $height ]]; then
				if [[ ${mapRow[$tempy1]:$x1:1} == "#" ]]; then
					flagdown1=1
				else
					if [[ ${mapRow[$tempy1]:$x1:1} == "." ]]; then
					    [[ $attemp1 -eq 1 ]]&&let bombvalue[$x1"_"$tempy1]--||let bombvalue1[$x1"_"$tempy1]--
					fi
				fi
			else
				flagdown1=1
			fi
		fi
	done
	if [[ $attemp1 -eq 1 ]]; then
    	first=${mapRow[$y1]:0:$x1}
    	last=${mapRow[$y1]:x1+1}
    	mapRow[$y1]=$first"."$last
    	echo "after blast" ${mapRow[$y1]} >&2
    	waiting[$x1"_"$y1]=3
    fi
}

check() {
	x=$1
	y=$2
	guardnum1=$3
	max1=$4
	let left=guardnum1-max1
	for cur in ${!bombvalue[@]}; do
	    bombvalue1["$cur"]=${bombvalue["$cur"]}
	done
	bomb $x $y 2
	max1=0
	for cur in ${bombvalue1[@]}; do
	    [[ $max1 -lt $cur ]]&&max1=$cur
	done
	if [[ ( $max1 -eq 1 ) && ( $bombs -le $left ) ]]; then
		bombvalue[$x"_"$y]=0
		checkpass=0
	else
		checkpass=1
	fi
}
read width height
for (( i=0; i<height; i++ )); do
    # mapRow: one line of the firewall grid
    read mapRow[$i]
	#echo ${mapRow[$i]} >&2
done

flag=0
clock=0
# game loop
while true; do
    # rounds: number of rounds left before the end of the game
    # bombs: number of bombs left
    read rounds bombs
	for cur in ${!waiting[*]}; do
		[[ ${waiting[$cur]} -gt 0 ]]&&let waiting[$cur]--
	done
	if [[ $flag -eq 0 ]]; then
		unset bombvalue
		unset bombopt
		unset bombvalue1
		declare -A bombvalue
		declare -A bombvalue1
		declare -a bombopt
		guardnum=0
		index=0
		for (( i=0; i<height; i++ )); do
			# mapRow: one line of the firewall grid
			for (( j=0; j<width; j++ )); do
				cur=${mapRow[$i]:$j:1}
				if [[ $cur == "@" ]]; then
					#echo "found guard at:" $j $i >&2
					guardadd $j $i
					let guardnum++
				fi
			done
		done
		checkpass=0
		while [ $checkpass -eq 0 ]; do
			max=0
			for (( i=0; i<index; i++ )); do
				cur=${bombopt[$i]}
				val=${bombvalue[$cur]}
				echo "check opt:" $cur "value:" $val >&2
				if [[ $max -le $val ]]; then
					max=$val
					pos=$cur
				fi
			done
			j=${pos%%_*}
			i=${pos##*_}
			echo "checking" $j $i >&2
			check $j $i $guardnum $max
		done
		if [[ ${waiting[$j"_"$i]} -eq 0 ]]; then
			echo $j $i
			bomb $j $i 1
			let guardnum=guardnum-max
			[[ $guardnum -eq 0 ]]&&flag=1
		else
			echo "WAIT"
		fi
	else
		echo "WAIT"
	fi
    # Write an action using echo
    # To debug: echo "Debug messages..." >&2
done
