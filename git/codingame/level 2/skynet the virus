#!/bin/bash
# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

# N: the total number of nodes in the level, including the gateways
# L: the number of links
# E: the number of exit gateways
read N L1 E1
#echo $N "_" $L "_" $E >&2
for (( i=0; i<L1; i++ )); do
    # N1: N1 and N2 defines a link between these nodes
    read N1 N2
    let "C[$N1]++"
    let "C[$N2]++"
    if [[ N1 -lt N2 ]]; then
        L[$i]=$N1" "$N2
        O[1$N1$N2]=0
    else
        L[$i]=$N2" "$N1
        O[1$N2$N1]=0
    fi
done
for (( i=0; i<E1; i++ )); do
    # EI: the index of a gateway node
    read EI
    E[$i]=$EI
done

for (( i=0; i<E1; i++ )); do
    for (( j=0; j<i; j++ )); do
       c=${E[$j]}
       d=${E[$i]}
       if [[ ${C[$d]} -gt ${C[$c]} ]]; then
            E[$i]=$c
            E[$j]=$d
       fi
    done
done

t=0
for (( i=0; i<E1; i++ )); do
    for (( j=0; j<L1; j++ )); do
        link=${L[$j]}
        N1=${link%" "*}
        N2=${link#*" "}
        if [ $N1 -eq ${E[$i]} -a ${C[$N2]} -gt 3 ]; then
            echo $N1 $N2 >&2
            for (( k=0; k<N; k++ )); do
                if [[ ${C[$k]} -eq 3 ]]; then
                    if [[ $k -lt $N2 ]]; then
                        if [[ "${O[1$k$N2]}" == "0" ]]; then
                            PL[$t]=$k" "$N2
                            let "t++"
                            echo "zhong" >&2
                        fi
                    else
                        if [[ "${O[1$N2$k]}" == "0" ]]; then
                            PL[$t]=$N2" "$k
                            let "t++"
                            echo "zhong" >&2
                        fi
                    fi
                fi
            done
        fi
        if [ $N2 -eq ${E[$i]} -a ${C[$N1]} -lt 3 ]; then
            echo $N1 $N2 >&2
            for (( k=0; k<N; k++ )); do
                if [[ ${C[$k]} -eq 3 ]]; then
                    if [[ $k -lt $N1 ]]; then
                        if [[ "${O[1$k$N1]}" == "0" ]]; then
                            PL[$t]=$k" "$N1
                            let "t++"
                        fi
                    else
                        if [[ "${O[1$N1$k]}" == "0" ]]; then
                            PL[$t]=$N1" "$k
                            let "t++"
                        fi
                    fi
                fi
            done
        fi
    done
done

for (( i=0; i<${#PL[@]}; i++ )); do
    echo ${PL[i]} >&2
done

t=0
s=0
# game loop
while true; do
    # SI: The index of the node on which the Skynet agent is positioned this turn
    read SI
    s=0
    for (( i=0; i<L1; i++ )); do
        # N1: N1 and N2 defines a link between these nodes
        link=${L[$i]}
        N1=${link%" "*}
        N2=${link#*" "}
        for (( j=0; j<E1; j++ )); do
            EI=${E[$j]}
            if [[ $SI -lt $EI ]]; then
                if [ $SI -eq $N1 -a $EI -eq $N2 ]; then
                    if [[ ${O[1$N1$N2]} -eq 0 ]]; then
                        echo $link
                        O[1$N1$N2]=1
                    else
                        if [[ $t -lt ${#PL[@]} ]]; then
                            echo ${PL[$t]}
                            t=`expr $t + 1`
                        else
                            echo ${L[$s]}
                            s=`expr $s + 1`
                        fi
                    fi
                    s=1
                fi
            else
                if [ $SI -eq $N2 -a $EI -eq $N1 ]; then
                    if [[ ${O[1$N1$N2]} -eq 0 ]]; then
                        echo $link
                        O[1$N1$N2]=1
                    else
                        if [[ $t -lt ${#PL[@]} ]]; then
                            echo ${PL[$t]}
                            t=`expr $t + 1`
                        else
                            echo ${L[$s]}
                            s=`expr $s + 1`
                        fi
                    fi
                    s=1
                fi
            fi
        done
    done
    if [[ $s -eq 0 ]]; then
        if [[ $t -lt ${#PL[@]} ]]; then
            echo ${PL[$t]}
            t=`expr $t + 1`
        else
            echo ${L[$s]}
            s=`expr $s + 1`
        fi
    fi

    # Write an action using echo
    # To debug: echo "Debug messages..." >&2

#    echo "0 1" # Example: 0 1 are the indices of the nodes you wish to sever the link between
done